Java 8 Features :-

List of Features :-
1.Functional Interface
2.Lambda Expressions
3.Stream API
4.Default Methods
5.Optional Class
6.Date and Time API
7.Nashorn Javascript Engine
8.Concurrency Enhancements
9.forEach() method
10.Parallel Array Sorting
11.Improved Annotations

1) Functional Interfaces :-
- Java 8 introduces several built in functional interfaces in java.util.function package to faciliate functional programming.
  i) Supplier<T>
       Represents a supplier of results.
 ii) Consumer<T>
       Represents an operation that accepts a single input argument and returns no result.
iii) Predicate<T>
       Represents a predicate (boolean-valued function) of one argument.
 iv) Function<T,R>
       Represents a function that accepts one argument and produces a result.
  v) Unary Operator<T>
       Represents an operation on a single operand that produces a result of the same type as its operand.
 vi) Binary Operator<T>
       Represents an operation upon two operands of the same type, producing a result of the same type as the operands.
- Functional Interface is an interface with only single abstarct method.
- we can create our own functional Interface.
Note:
When we creating our own functional interface we should use @FunctionalInterface annotation to mark it as functional interface. 
Although it is not mandatory to use it, but itâ€™s good to use it with functional interfaces to avoid addition of extra methods accidentally. 
It will throw compile time error if we try to add more than one abstract method in a functional interface.

- Along with the one abstract method, it can have any number of default and static methods. It can also have methods of object class.
- A functional interface can extends another interface only when it does not have any abstract method.

2) Lambda Expression :-
- Lambda expression is a way to visualize the functional programming in the java object oriented world.
- In java, lambda expressions are similar to functional programming, but not 100%.
- Lambda expression applicable only on functional interface.
- Java Lambda Expression Syntax :-
  (argument-list) -> {function-body}  
  
  Where:
  Argument-list: It can be empty or non-empty as well.
  Arrow notation/lambda notation: It is used to link arguments-list and body of expression.
  Function-body: It contains expressions and statements for lambda expression.
- Lambda expression advantage :-
  i) It reduce lines of code.
 ii) It provides sequential and parallel execution support.
iii) It provides a way to pass behaviors into methods.

3) Stream API :- 
- Stream API is a feature of Java, which is introduced in Java 8 to process the collection of objects.
- A stream in java is a sequence of objects that supports various methods that can be pipelined to produce the desired result.

   Use of Stream in Java: 
    - Stream API is way to express and process the collection of objects.
    - Enable us to perform operations like filtering, mapping, reducing & sorting.

   Features :- 
    - A Stream is not a data structure instead it takes input from the collection, Arrays or I/O channels.
    - A Stream is don't change the original data structure, they only provide the result as per the pipelined methods.

   Different operations of Stream :- 
     1. Intermediate operations
     2. Terminal operations

   Intermediate operations :-
     Intermediate operations are the type of operations in which multiple methods are chained in a row. 
     
   characteristics of Intermediate operations :-
     - methods are chained together.
     - intermediate operations transform stream into another stream.

   There are few intermediate operations mentioned below :-
     - map() - Transform each element using a function & returns the stream.
       Syntax :-
        <R> Stream<R> map(Function<? super T, ? extends R> mapper)
     - filter() - Filteres element based on a condition & returns the stream.
       Syntax :- 
         Stream<T> filter(Predicate<? super T> predicate)
     - sorted() - sorts elements in natural or custom order & returns the stream.
       syntax :-
          Stream<T> sorted()
          Stream<T> sorted(Comparator<? super T> comparator)
     - distinct() - removes the duplicate elements. It returns a stream consisting of the distinct elements.
   
   Terminal operations :- 
      Trigger the processing & returns a non-stream result.

   There are few intermediate operations mentioned below :-
      - forEach() - Iterates over the elements.
        Syntax :- 
          void forEach(Consumer<? super T> action)
      - collect() - Gathers a list into a collection.
        Syntax :-
          <R, A> R collect(Collector<? super T, A, R> collector)
      - reduce() - Reduces elements into a single value.
        Syntax :-
          T reduce(T identity, BinaryOperator<T> accumulator)
          Optional<T> reduce(BinaryOperator<T> accumulator)
      - count() - Returns the count of elements in the stream.
        Syntax :- 
          long count()
      - findFirst() - Returns the first element of the stream, if present.
        Syntax :-
          Optional<T> findFirst() 
      - allMatch() - Checks if all elements of the stream match a given predicate.
        Syntax :-
          boolean allMatch(Predicate<? super T> predicate)
      - anyMatch() - Checks if any elements of the stream matches given a predicate.
        Syntax :- 
          boolean anyMatch(Predicate<? super T> predicate)
      - limit() :- Limits the number of elements.

4) Default Methods :- 
- Java default methods are defined inside the interface and tagged with default keyword. 
  Default methods are non-abstract methods. We can override default methods to provide more specific implementation.

Why default method?
- For example we have an interface which has multiple methods, 
and multiple classes are implementing this interface. One of the method implementation can be common across the class. 
We can make that method as a default method, so that the implementation is common for all classes.

- Second scenario where we have already existing application, for a new requirements we have to add a method to the existing interface.
If we add new method then we need to implement it throughout the implementation classes. By using the Java 8 default method we can add a default 
implementation of that method which resolves the problem.

5) Optional class :- 
- Java 8 introduced a new public final class Optional in java.util package.
- Optional class in java 8, aimed to provide a cleaner and safer way to handle null values.
- The Optional class is a container object that may or may not contain null values.
- It helps to prevent NullPointerExceptions by indicating the prescence or abscence of a value explicitly.

Commonly used methods of Java Optional class :-
- Optional.ofNullable(): It returns a Non-empty Optional if the given object has a value, otherwise it returns an empty Optional.
- isPresent(): It is used check whether the particular Optional object is empty or not-empty.
- ifPresent(): It only executes if the given Optional object is non-empty.

